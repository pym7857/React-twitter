{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///./node_modules/@babel/runtime-corejs2/core-js/parse-int.js","webpack:///./pages/post.js","webpack:///./node_modules/@babel/runtime-corejs2/helpers/esm/asyncToGenerator.js","webpack:///external \"immer\"","webpack:///external \"core-js/library/fn/promise\"","webpack:///external \"react\"","webpack:///external \"regenerator-runtime\"","webpack:///./node_modules/@babel/runtime-corejs2/core-js/promise.js","webpack:///external \"react-redux\"","webpack:///./node_modules/@babel/runtime-corejs2/regenerator/index.js","webpack:///./reducers/post.js","webpack:///external \"core-js/library/fn/parse-int\"","webpack:///external \"react-helmet\""],"names":["Post","id","useSelector","state","post","singlePost","backURL","User","nickname","content","name","property","Images","src","getInitialProps","context","store","dispatch","type","LOAD_POST_REQUEST","data","query","initialState","mainPosts","imagePaths","isAddingPost","addPostErrorReason","postAdded","isAddingComment","addCommentErrorReason","commentAdded","addLikeErrorReason","hasMorePost","LOAD_MAIN_POSTS_REQUEST","LOAD_MAIN_POSTS_SUCCESS","LOAD_MAIN_POSTS_FAILURE","LOAD_HASHTAG_POSTS_REQUEST","LOAD_HASHTAG_POSTS_SUCCESS","LOAD_HASHTAG_POSTS_FAILURE","LOAD_USER_POSTS_REQUEST","LOAD_USER_POSTS_SUCCESS","LOAD_USER_POSTS_FAILURE","UPLOAD_IMAGES_REQUEST","UPLOAD_IMAGES_SUCCESS","UPLOAD_IMAGES_FAILURE","ADD_POST_REQUEST","ADD_POST_SUCCESS","ADD_POST_FAILURE","LIKE_POST_REQUEST","LIKE_POST_SUCCESS","LIKE_POST_FAILURE","UNLIKE_POST_REQUEST","UNLIKE_POST_SUCCESS","UNLIKE_POST_FAILURE","ADD_COMMENT_REQUEST","ADD_COMMENT_SUCCESS","ADD_COMMENT_FAILURE","LOAD_COMMENTS_REQUEST","LOAD_COMMENTS_SUCCESS","LOAD_COMMENTS_FAILURE","RETWEET_REQUEST","RETWEET_SUCCESS","RETWEET_FAILURE","REMOVE_POST_REQUEST","REMOVE_POST_SUCCESS","REMOVE_POST_FAILURE","REMOVE_IMAGE","LOAD_POST_SUCCESS","LOAD_POST_FAILURE","reducer","action","produce","draft","forEach","p","push","index","findIndex","v","i","splice","lastId","unshift","error","postIndex","postId","Comments","comment","comments","Likers","userId","alert","likerIndex"],"mappings":"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","file":"static\\kEqV0Dp4dQoHOTpZ9h4LU\\pages\\post.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = require('../../../ssr-module-cache.js');\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tvar threw = true;\n \t\ttry {\n \t\t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n \t\t\tthrew = false;\n \t\t} finally {\n \t\t\tif(threw) delete installedModules[moduleId];\n \t\t}\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 2);\n","module.exports = require(\"core-js/library/fn/parse-int\");","import React from 'react';\r\nimport { useSelector } from 'react-redux';\r\nimport PropTypes from 'prop-types';\r\nimport Helmet from 'react-helmet';\r\n\r\nimport { LOAD_POST_REQUEST } from '../reducers/post';\r\n\r\n/* 개별 포스트 불러오는 페이지 */\r\n/* 검색 엔진이 컨텐츠를 어떻게 긁어가는지 테스트 하기 위한 페이지 */\r\nconst Post = ({ id }) => {\r\n    const { singlePost } = useSelector(state => state.post);\r\n\r\n    const backURL = 'http://localhost:3067';\r\n    return (\r\n        <>\r\n            <Helmet \r\n                title={`${singlePost.User.nickname}님의 글`}\r\n                description={singlePost.content}\r\n                meta={[{\r\n                    name: 'description', content: singlePost.content,\r\n                }, {\r\n                    property: 'og:title', content: `${singlePost.User.nickname}님의 게시글`,\r\n                }, {\r\n                    property: 'og:description', content: singlePost.content,\r\n                }, {\r\n                    property: 'og:image', content: singlePost.Images[0] && `${backURL}/${singlePost.Images[0].src}`,\r\n                }, {\r\n                    property: 'og:url', content: `${backURL}/post/${id}`,\r\n                }]}\r\n            />\r\n            <div>{ singlePost.content }</div>\r\n            <div>{ singlePost.User.nickname }</div>\r\n            <div>\r\n                { singlePost.Images[0] && <img src={`${backURL}/${singlePost.Images[0].src}`} /> }\r\n            </div>\r\n        </>\r\n    );\r\n};\r\n\r\nPost.getInitialProps = async (context) => {\r\n    // [SSR] dispatch\r\n    context.store.dispatch({\r\n        type: LOAD_POST_REQUEST,\r\n        data: context.query.id,\r\n    });\r\n    return { id: parseInt(context.query.id, 10) };\r\n};\r\n\r\nPost.propTypes = {\r\n    id: PropTypes.number.isRequired,\r\n};\r\n\r\nexport default Post;","import _Promise from \"../../core-js/promise\";\n\nfunction asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {\n  try {\n    var info = gen[key](arg);\n    var value = info.value;\n  } catch (error) {\n    reject(error);\n    return;\n  }\n\n  if (info.done) {\n    resolve(value);\n  } else {\n    _Promise.resolve(value).then(_next, _throw);\n  }\n}\n\nexport default function _asyncToGenerator(fn) {\n  return function () {\n    var self = this,\n        args = arguments;\n    return new _Promise(function (resolve, reject) {\n      var gen = fn.apply(self, args);\n\n      function _next(value) {\n        asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value);\n      }\n\n      function _throw(err) {\n        asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err);\n      }\n\n      _next(undefined);\n    });\n  };\n}","module.exports = require(\"immer\");","module.exports = require(\"core-js/library/fn/promise\");","module.exports = require(\"react\");","module.exports = require(\"regenerator-runtime\");","module.exports = require(\"core-js/library/fn/promise\");","module.exports = require(\"react-redux\");","module.exports = require(\"regenerator-runtime\");\n","import produce from 'immer';\r\n\r\n/* redux state */\r\nexport const initialState = {\r\n    mainPosts: [],\r\n    imagePaths: [],             // 미리보기 이미지 경로 \r\n    \r\n    isAddingPost: false,        // 포스트 업로드 중\r\n    addPostErrorReason: '',     // 포스트 업로드 실패 사유 \r\n    postAdded: false,           // 포스트 업로드 성공 여부 (쓰는 이유: 글 작성후, 이게 true가 되면 TextArea 비워주기 위해서)\r\n    \r\n    isAddingComment: false,     // 댓글 업로드 중 \r\n    addCommentErrorReason: '',  // 댓글 업로드 에러 사유 \r\n    commentAdded: false,        // 댓글이 추가되었는지 (쓰는 이유: 댓글 작성후, 이게 true가 되면 TextArea 비워주기 위해서)\r\n    \r\n    addLikeErrorReason: '',\r\n\r\n    hasMorePost: false,         // 스크롤을 더 내려야 할지 \r\n    singlePost: null,\r\n};\r\n\r\n/* Action의 이름 */\r\nexport const LOAD_MAIN_POSTS_REQUEST = 'LOAD_MAIN_POSTS_REQUEST';       // 메인 포스트 로딩 액션\r\nexport const LOAD_MAIN_POSTS_SUCCESS = 'LOAD_MAIN_POSTS_SUCCESS';\r\nexport const LOAD_MAIN_POSTS_FAILURE = 'LOAD_MAIN_POSTS_FAILURE';\r\n\r\nexport const LOAD_HASHTAG_POSTS_REQUEST = 'LOAD_HASHTAG_POSTS_REQUEST'; // 해시태그로 검색했을 때 결과 로딩 액션\r\nexport const LOAD_HASHTAG_POSTS_SUCCESS = 'LOAD_HASHTAG_POSTS_SUCCESS';\r\nexport const LOAD_HASHTAG_POSTS_FAILURE = 'LOAD_HASHTAG_POSTS_FAILURE';\r\n\r\nexport const LOAD_USER_POSTS_REQUEST = 'LOAD_USER_POSTS_REQUEST';       // 사용자가 어떤 게시글을 썼는지 로딩 액션\r\nexport const LOAD_USER_POSTS_SUCCESS = 'LOAD_USER_POSTS_SUCCESS';\r\nexport const LOAD_USER_POSTS_FAILURE = 'LOAD_USER_POSTS_FAILURE';\r\n\r\nexport const UPLOAD_IMAGES_REQUEST = 'UPLOAD_IMAGES_REQUEST';           // 이미지 업로드 액션 \r\nexport const UPLOAD_IMAGES_SUCCESS = 'UPLOAD_IMAGES_SUCCESS';\r\nexport const UPLOAD_IMAGES_FAILURE = 'UPLOAD_IMAGES_FAILURE';\r\n\r\nexport const ADD_POST_REQUEST = 'ADD_POST_REQUEST';                     // 게시글 업로드 액션\r\nexport const ADD_POST_SUCCESS = 'ADD_POST_SUCCESS';\r\nexport const ADD_POST_FAILURE = 'ADD_POST_FAILURE';\r\n\r\nexport const LIKE_POST_REQUEST = 'LIKE_POST_REQUEST';                   // 게시글 좋아요 \r\nexport const LIKE_POST_SUCCESS = 'LIKE_POST_SUCCESS';\r\nexport const LIKE_POST_FAILURE = 'LIKE_POST_FAILURE';\r\n\r\nexport const UNLIKE_POST_REQUEST = 'UNLIKE_POST_REQUEST';               // 게시글 좋아요 취소 \r\nexport const UNLIKE_POST_SUCCESS = 'UNLIKE_POST_SUCCESS';\r\nexport const UNLIKE_POST_FAILURE = 'UNLIKE_POST_FAILURE';\r\n\r\nexport const ADD_COMMENT_REQUEST = 'ADD_COMMENT_REQUEST';\r\nexport const ADD_COMMENT_SUCCESS = 'ADD_COMMENT_SUCCESS';\r\nexport const ADD_COMMENT_FAILURE = 'ADD_COMMENT_FAILURE';\r\n\r\nexport const LOAD_COMMENTS_REQUEST = 'LOAD_COMMENTS_REQUEST';           // 게시글 댓글 불러오기 \r\nexport const LOAD_COMMENTS_SUCCESS = 'LOAD_COMMENTS_SUCCESS';\r\nexport const LOAD_COMMENTS_FAILURE = 'LOAD_COMMENTS_FAILURE';\r\n\r\nexport const RETWEET_REQUEST = 'RETWEET_REQUEST';                       // 리트윗\r\nexport const RETWEET_SUCCESS = 'RETWEET_SUCCESS';\r\nexport const RETWEET_FAILURE = 'RETWEET_FAILURE';\r\n\r\nexport const REMOVE_POST_REQUEST = 'REMOVE_POST_REQUEST';               // 포스트 제거 \r\nexport const REMOVE_POST_SUCCESS = 'REMOVE_POST_SUCCESS';\r\nexport const REMOVE_POST_FAILURE = 'REMOVE_POST_FAILURE';\r\n\r\nexport const REMOVE_IMAGE = 'REMOVE_IMAGE';\r\n\r\nexport const LOAD_POST_REQUEST = 'LOAD_POST_REQUEST';           // 게시글 한개 불러오기 \r\nexport const LOAD_POST_SUCCESS = 'LOAD_POST_SUCCESS';\r\nexport const LOAD_POST_FAILURE = 'LOAD_POST_FAILURE';\r\n\r\n/* 실제 Action */\r\n// ...\r\n\r\n/* Reducer */\r\nconst reducer = (state = initialState, action) => {\r\n    /* immer */\r\n    return produce(state, (draft) => {      // immer에게 불변성을 맡기고, 우리는 draft만 자유롭게 변경해주면 된다.\r\n      switch (action.type) {\r\n        case UPLOAD_IMAGES_REQUEST: {\r\n            break;\r\n            /* return {\r\n              ...state,\r\n            }; */\r\n        }\r\n        case UPLOAD_IMAGES_SUCCESS: {\r\n            action.data.forEach((p) => {    // 이처럼, 더이상 불변성을 유지하지 않아도 된다. (immer에서 draft보고 알아서 불변성 감지해준다.)\r\n              draft.imagePaths.push(p);\r\n            }); \r\n            break; \r\n            /* return {\r\n              ...state,\r\n              imagePaths: [...state.imagePaths, ...action.data],    // 기존 imagePaths배열에 action.data 추가 \r\n            }; */\r\n        }\r\n        case UPLOAD_IMAGES_FAILURE: {\r\n            break;\r\n            /* return {\r\n              ...state,\r\n            }; */\r\n        }\r\n        case REMOVE_IMAGE: {\r\n            const index = draft.imagePaths.findIndex((v, i) => i === action.index);\r\n            draft.imagePaths.splice(index, 1);\r\n            break;\r\n            /* return {\r\n                ...state,\r\n                imagePaths: state.imagePaths.filter((v, i) => i !== action.index),\r\n            }; */\r\n        }\r\n        case LOAD_MAIN_POSTS_REQUEST: \r\n        case LOAD_HASHTAG_POSTS_REQUEST:\r\n        case LOAD_USER_POSTS_REQUEST: {\r\n            draft.mainPosts = !action.lastId ? [] : draft.mainPosts;      // lastId가 없으면, mainPosts = []\r\n            draft.hasMorePost = action.lastId ? draft.hasMorePost : true;\r\n            break;\r\n            /* return {\r\n              ...state,\r\n              mainPosts: action.lastId === 0 ? [] : state.mainPosts,  // lastId가 0 이면(=처음 화면이면): REQUEST시, mainPosts = []  -> 다른데 갔다가 다시 메인화면 올 수 도 있기 때문  \r\n                                                                      // lastId가 0 이 아니라면(=더보기 클릭시): REQUEST시, 기존 mainPosts가져오기 \r\n              hasMorePost: action.lastId ? state.hasMorePost : true,  // 맨 첫 페이지에 게시글 로딩할때, hasMorePost가 true가 되야함. (pages/index.js hasMorePost분기 부분 참조)\r\n            }; */\r\n        }\r\n        case LOAD_MAIN_POSTS_SUCCESS: \r\n        case LOAD_HASHTAG_POSTS_SUCCESS:\r\n        case LOAD_USER_POSTS_SUCCESS: {\r\n            action.data.forEach((p) => {\r\n              draft.mainPosts.push(p);\r\n            });\r\n            break;\r\n            /* return {\r\n              ...state,\r\n              mainPosts: state.mainPosts.concat(action.data),   // 덮어쓰는게 아니라, 이전 게시글에 추가하기\r\n              hasMorePost: action.data.length === 10,           // reducers/user.js에서 hasMoreFollower했던거랑 동일한 원리 !!\r\n            }; */\r\n        }\r\n        case LOAD_MAIN_POSTS_FAILURE: \r\n        case LOAD_HASHTAG_POSTS_FAILURE:\r\n        case LOAD_USER_POSTS_FAILURE: {\r\n            break;\r\n            /* return {\r\n              ...state,\r\n            }; */\r\n        }\r\n        case ADD_POST_REQUEST: {\r\n            draft.isAddingPost = true;\r\n            draft.addPostErrorReason = '';\r\n            draft.postAdded = false;\r\n            break;\r\n            /* return {\r\n                ...state,\r\n                isAddingPost: true,\r\n                addPostErrorReason: '',\r\n                postAdded: false,\r\n            }; */\r\n        }\r\n        case ADD_POST_SUCCESS: {\r\n            draft.isAddingPost = false;\r\n            draft.mainPosts.unshift(action.data);   // 배열 맨 앞에 추가할때는 unshift()\r\n            draft.postAdded = true;\r\n            draft.imagePaths = [];\r\n            break;\r\n            /* return {\r\n                ...state,\r\n                isAddingPost: false,\r\n                mainPosts: [action.data, ...state.mainPosts], // 포스트들 앞에 들어가게 된다.\r\n                postAdded: true,\r\n                imagePaths: [],                               // success하는 순간, imagePaths 비워주기 \r\n            }; */\r\n        }\r\n        case ADD_POST_FAILURE: {\r\n            draft.isAddingPost = false;\r\n            draft.addPostErrorReason = action.error;\r\n            break;\r\n            /* return {\r\n                ...state,\r\n                isAddingPost: false,\r\n                addPostErrorReason: action.error,\r\n            }; */\r\n        }\r\n        case ADD_COMMENT_REQUEST: {\r\n            draft.isAddingComment = true;\r\n            draft.addCommentErrorReason = '';\r\n            draft.commentAdded = false;\r\n            break;\r\n            /* return {\r\n                ...state,\r\n                isAddingComment: true,\r\n                addCommentErrorReason: '',\r\n                commentAdded: false,\r\n            }; */\r\n            \r\n        }\r\n        case ADD_COMMENT_SUCCESS: {\r\n            const postIndex = draft.mainPosts.findIndex(v => v.id === action.data.postId);\r\n            draft.mainPosts[postIndex].Comments.push(action.data.comment);\r\n            draft.isAddingComment = false;\r\n            draft.commentAdded = true;\r\n            break;\r\n            /* const postIndex = state.mainPosts.findIndex(v => v.id === action.data.postId); // 먼저, 여러개의 게시글 중에 해당 게시글의 index를 도출한 후,\r\n            const post = state.mainPosts[postIndex];                  // 해당 게시글을 찾는다\r\n            const Comments = [...post.Comments, action.data.comment]; // 불변성을 확보하면서, 뒤에다가 새 댓글 달아준다 \r\n            const mainPosts = [...state.mainPosts];                   // mainPosts도 불변성을 확보해 줘야한다.\r\n            mainPosts[postIndex] = { ...post, Comments };\r\n            return {\r\n                ...state,\r\n                isAddingComment: false,\r\n                mainPosts, // 여러 게시글 중에 해당하는 게시글에 해당 댓글 달아주기 (불변성 때문에 복잡한 작업)\r\n                commentAdded: true,\r\n            }; */\r\n        }\r\n        case ADD_COMMENT_FAILURE: {\r\n            draft.isAddingComment = false;\r\n            draft.addCommentErrorReason = action.error;\r\n            break;\r\n            /* return {\r\n                ...state,\r\n                isAddingComment: false,\r\n                addCommentErrorReason: action.error,\r\n            }; */\r\n        }\r\n        case LOAD_COMMENTS_SUCCESS: {\r\n            const postIndex = draft.mainPosts.findIndex(v => v.id === action.data.postId);\r\n            draft.mainPosts[postIndex].Comments = action.data.comments;\r\n            break;\r\n            /* const postIndex = state.mainPosts.findIndex(v => v.id === action.data.postId);\r\n            const post = state.mainPosts[postIndex];\r\n            const Comments = action.data.comments;\r\n            const mainPosts = [...state.mainPosts];         // mainPosts도 불변성을 확보해 줘야한다.\r\n            mainPosts[postIndex] = { ...post, Comments };\r\n            return {\r\n              ...state,\r\n              mainPosts,\r\n            }; */\r\n        }\r\n        case LIKE_POST_REQUEST: {\r\n            break;\r\n            /* return {\r\n              ...state,\r\n            }; */\r\n        }\r\n        case LIKE_POST_SUCCESS: {\r\n            const postIndex = draft.mainPosts.findIndex(v => v.id === action.data.postId);\r\n            draft.mainPosts[postIndex].Likers.unshift({ id: action.data.userId });            // 배열 맨 앞에 추가할때는 unshift()\r\n            break;\r\n            /* const postIndex = state.mainPosts.findIndex(v => v.id === action.data.postId);\r\n            const post = state.mainPosts[postIndex];\r\n            const Likers = [{ id: action.data.userId }, ...post.Likers];    // 좋아요 누른 사람들 목록에, 본인 추가 \r\n            const mainPosts = [...state.mainPosts];\r\n            mainPosts[postIndex] = { ...post, Likers };\r\n            return {\r\n              ...state,\r\n              mainPosts,\r\n            }; */\r\n        }\r\n        case LIKE_POST_FAILURE: {\r\n            alert('좋아요 실패!');\r\n            draft.addLikeErrorReason = action.error;\r\n            break;\r\n            /* return {\r\n              ...state,\r\n              addLikeErrorReason: action.error,\r\n            }; */\r\n        }\r\n        case UNLIKE_POST_REQUEST: {\r\n            break;\r\n            /* return {\r\n              ...state,\r\n            }; */\r\n        }\r\n        case UNLIKE_POST_SUCCESS: {\r\n            const postIndex = draft.mainPosts.findIndex(v => v.id === action.data.postId);\r\n            const likerIndex = draft.mainPosts[postIndex].Likers.findIndex(v => v.id === action.data.userId);\r\n            draft.mainPosts[postIndex].Likers.splice(likerIndex, 1);\r\n            break;\r\n            /* const postIndex = state.mainPosts.findIndex(v => v.id === action.data.postId);\r\n            const post = state.mainPosts[postIndex];\r\n            const Likers = post.Likers.filter(v => v.id !== action.data.userId);  // 좋아요 누른 사람들 목록에, 본인 제외  \r\n            const mainPosts = [...state.mainPosts];\r\n            mainPosts[postIndex] = { ...post, Likers };\r\n            return {\r\n              ...state,\r\n              mainPosts,\r\n            }; */\r\n        }\r\n        case UNLIKE_POST_FAILURE: {\r\n            break;\r\n            /* return {\r\n              ...state,\r\n            }; */\r\n        }\r\n        case RETWEET_REQUEST: {\r\n            break;\r\n            /* return {\r\n              ...state,\r\n            }; */\r\n        }\r\n        case RETWEET_SUCCESS: {\r\n            draft.mainPosts.unshift(action.data);\r\n            break;\r\n            /* return {\r\n              ...state,\r\n              mainPosts: [action.data, ...state.mainPosts],     // 기존 게시글의 제일 앞에 추가해준다. \r\n            }; */\r\n        }\r\n        case RETWEET_FAILURE: {\r\n            break;\r\n            /* return {\r\n              ...state,\r\n            }; */\r\n        }\r\n        case REMOVE_POST_REQUEST: {\r\n            break;\r\n            /* return {\r\n              ...state,\r\n            }; */\r\n        }\r\n        case REMOVE_POST_SUCCESS: {\r\n            const index = draft.mainPosts.findIndex(v => v.id === action.data);\r\n            draft.mainPosts.splice(index, 1);\r\n            break;\r\n            /* return {\r\n              ...state,\r\n              mainPosts: state.mainPosts.filter(v => v.id !== action.data),\r\n            }; */\r\n        }\r\n        case REMOVE_POST_FAILURE: {\r\n            break;\r\n            /* return {\r\n              ...state,\r\n            }; */\r\n        }\r\n        case LOAD_POST_SUCCESS: {\r\n          draft.singlePost = action.data;\r\n          break;\r\n        }\r\n        default: {\r\n            break;\r\n            /* return {\r\n              ...state,\r\n            }; */\r\n        }\r\n      }\r\n    });\r\n};\r\nexport default reducer;\r\n\r\n\r\n\r\n/* immer쓰기 전 코드 */\r\n/* switch (action.type) {\r\n  case UPLOAD_IMAGES_REQUEST: {\r\n      return {\r\n        ...state,\r\n      };\r\n  }\r\n  case UPLOAD_IMAGES_SUCCESS: {\r\n      return {\r\n        ...state,\r\n        imagePaths: [...state.imagePaths, ...action.data],    // 기존 imagePaths배열에 action.data 추가 \r\n      };\r\n  }\r\n  case UPLOAD_IMAGES_FAILURE: {\r\n      return {\r\n        ...state,\r\n      };\r\n  }\r\n  case REMOVE_IMAGE: {\r\n      return {\r\n          ...state,\r\n          imagePaths: state.imagePaths.filter((v, i) => i !== action.index),\r\n      };\r\n  }\r\n  case LOAD_MAIN_POSTS_REQUEST: \r\n  case LOAD_HASHTAG_POSTS_REQUEST:\r\n  case LOAD_USER_POSTS_REQUEST: {\r\n      return {\r\n        ...state,\r\n        mainPosts: action.lastId === 0 ? [] : state.mainPosts,  // lastId가 0 이면(=처음 화면이면): REQUEST시, mainPosts = []  -> 다른데 갔다가 다시 메인화면 올 수 도 있기 때문  \r\n                                                                // lastId가 0 이 아니라면(=더보기 클릭시): REQUEST시, 기존 mainPosts가져오기 \r\n        hasMorePost: action.lastId ? state.hasMorePost : true,  // 맨 첫 페이지에 게시글 로딩할때, hasMorePost가 true가 되야함. (pages/index.js hasMorePost분기 부분 참조)\r\n      };\r\n  }\r\n  case LOAD_MAIN_POSTS_SUCCESS: \r\n  case LOAD_HASHTAG_POSTS_SUCCESS:\r\n  case LOAD_USER_POSTS_SUCCESS: {\r\n      return {\r\n        ...state,\r\n        mainPosts: state.mainPosts.concat(action.data),   // 덮어쓰는게 아니라, 이전 게시글에 추가하기\r\n        hasMorePost: action.data.length === 10,           // reducers/user.js에서 hasMoreFollower했던거랑 동일한 원리 !!\r\n      };\r\n  }\r\n  case LOAD_MAIN_POSTS_FAILURE: \r\n  case LOAD_HASHTAG_POSTS_FAILURE:\r\n  case LOAD_USER_POSTS_FAILURE: {\r\n      return {\r\n        ...state,\r\n      };\r\n  }\r\n  case ADD_POST_REQUEST: {\r\n      return {\r\n          ...state,\r\n          isAddingPost: true,\r\n          addPostErrorReason: '',\r\n          postAdded: false,\r\n      };\r\n  }\r\n  case ADD_POST_SUCCESS: {\r\n      return {\r\n          ...state,\r\n          isAddingPost: false,\r\n          mainPosts: [action.data, ...state.mainPosts], // 포스트들 앞에 들어가게 된다.\r\n          postAdded: true,\r\n          imagePaths: [],                               // success하는 순간, imagePaths 비워주기 \r\n      };\r\n  }\r\n  case ADD_POST_FAILURE: {\r\n      return {\r\n          ...state,\r\n          isAddingPost: false,\r\n          addPostErrorReason: action.error,\r\n      };\r\n  }\r\n  case ADD_COMMENT_REQUEST: {\r\n      return {\r\n          ...state,\r\n          isAddingComment: true,\r\n          addCommentErrorReason: '',\r\n          commentAdded: false,\r\n      };\r\n  }\r\n  case ADD_COMMENT_SUCCESS: {\r\n      // 항상 불변성을 조심해야 된다. \r\n      // 바뀔 객체만 새로 만들어 줘야된다. \r\n      const postIndex = state.mainPosts.findIndex(v => v.id === action.data.postId); // 먼저, 여러개의 게시글 중에 해당 게시글의 index를 도출한 후,\r\n      const post = state.mainPosts[postIndex]; // 해당 게시글을 찾는다\r\n      const Comments = [...post.Comments, action.data.comment]; // 불변성을 확보하면서, 뒤에다가 새 댓글 달아준다 \r\n      const mainPosts = [...state.mainPosts]; // mainPosts도 불변성을 확보해 줘야한다.\r\n      mainPosts[postIndex] = { ...post, Comments };\r\n\r\n      return {\r\n          ...state,\r\n          isAddingComment: false,\r\n          mainPosts, // 여러 게시글 중에 해당하는 게시글에 해당 댓글 달아주기 (불변성 때문에 복잡한 작업)\r\n          commentAdded: true,\r\n      };\r\n  }\r\n  case ADD_COMMENT_FAILURE: {\r\n      return {\r\n          ...state,\r\n          isAddingComment: false,\r\n          addCommentErrorReason: action.error,\r\n      };\r\n  }\r\n  case LOAD_COMMENTS_SUCCESS: {\r\n      // 항상 불변성을 조심해야 된다. \r\n      // 바뀔 객체만 새로 만들어 줘야된다. \r\n      const postIndex = state.mainPosts.findIndex(v => v.id === action.data.postId);\r\n      const post = state.mainPosts[postIndex];\r\n      const Comments = action.data.comments;\r\n      const mainPosts = [...state.mainPosts];\r\n      mainPosts[postIndex] = { ...post, Comments };\r\n\r\n      return {\r\n        ...state,\r\n        mainPosts,\r\n      };\r\n  }\r\n  case LIKE_POST_REQUEST: {\r\n      return {\r\n        ...state,\r\n      };\r\n  }\r\n  case LIKE_POST_SUCCESS: {\r\n      // 항상 불변성을 조심해야 된다. \r\n      // 바뀔 객체만 새로 만들어 줘야된다. \r\n      const postIndex = state.mainPosts.findIndex(v => v.id === action.data.postId);\r\n      const post = state.mainPosts[postIndex];\r\n      const Likers = [{ id: action.data.userId }, ...post.Likers];    // 좋아요 누른 사람들 목록에, 본인 추가 \r\n      const mainPosts = [...state.mainPosts];\r\n      mainPosts[postIndex] = { ...post, Likers };\r\n\r\n      return {\r\n        ...state,\r\n        mainPosts,\r\n      };\r\n  }\r\n  case LIKE_POST_FAILURE: {\r\n      alert('좋아요 실패!');\r\n      return {\r\n        ...state,\r\n        addLikeErrorReason: action.error,\r\n      };\r\n  }\r\n  case UNLIKE_POST_REQUEST: {\r\n      return {\r\n        ...state,\r\n      };\r\n  }\r\n  case UNLIKE_POST_SUCCESS: {\r\n      const postIndex = state.mainPosts.findIndex(v => v.id === action.data.postId);\r\n      const post = state.mainPosts[postIndex];\r\n      const Likers = post.Likers.filter(v => v.id !== action.data.userId);  // 좋아요 누른 사람들 목록에, 본인 제외  \r\n      const mainPosts = [...state.mainPosts];\r\n      mainPosts[postIndex] = { ...post, Likers };\r\n\r\n      return {\r\n        ...state,\r\n        mainPosts,\r\n      };\r\n  }\r\n  case UNLIKE_POST_FAILURE: {\r\n      return {\r\n        ...state,\r\n      };\r\n  }\r\n  case RETWEET_REQUEST: {\r\n      return {\r\n        ...state,\r\n      };\r\n  }\r\n  case RETWEET_SUCCESS: {\r\n      return {\r\n        ...state,\r\n        mainPosts: [action.data, ...state.mainPosts],     // 기존 게시글의 제일 앞에 추가해준다. \r\n      };\r\n  }\r\n  case RETWEET_FAILURE: {\r\n      return {\r\n        ...state,\r\n      };\r\n  }\r\n  case REMOVE_POST_REQUEST: {\r\n      return {\r\n        ...state,\r\n      };\r\n  }\r\n  case REMOVE_POST_SUCCESS: {\r\n      //const index = draft.mainPosts.findIndex(v => v.id === action.data);\r\n      //draft.mainPosts.splice(index, 1);\r\n      //break;\r\n      return {\r\n        ...state,\r\n        mainPosts: state.mainPosts.filter(v => v.id !== action.data),\r\n      };\r\n  }\r\n  case REMOVE_POST_FAILURE: {\r\n      return {\r\n        ...state,\r\n      };\r\n  }\r\n  default: {\r\n      return {\r\n          ...state,\r\n      };\r\n  }\r\n} */","module.exports = require(\"core-js/library/fn/parse-int\");","module.exports = require(\"react-helmet\");"],"sourceRoot":""}